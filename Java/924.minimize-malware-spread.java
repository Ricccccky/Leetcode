import java.util.Arrays;

/*
 * @lc app=leetcode id=924 lang=java
 *
 * [924] Minimize Malware Spread
 */

// @lc code=start
class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        int[] parents = new int[n];
        int[] mal = new int[n];
        int[] union = new int[n];
        Arrays.sort(initial);
        for (int i = 0; i < n; i++) {
            parents[i] = i;
        }
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (graph[i][j] == 1) {
                    unite(i, j, parents);
                }
            }
        }
        for (int i : initial) {
            mal[find(i, parents)]++;
        }
        for (int i = 0; i < n; i++) {
            union[find(i, parents)]++;
        }
        int count = 0;
        int res = Integer.MAX_VALUE;
        for (int i : initial) {
            int parent = find(i, parents);
            if (mal[parent] == 1 && count < union[parent]) {
                res = i;
                count = union[parent];
            }
        }
        if (count == 0) {
            return res = initial[0];
        }

        return res;
    }

    private int find(int x, int[] parents) {
        while (parents[x] != x) {
            x = find(parents[x], parents);
        }
        return x;
    }

    private void unite(int x, int y, int[] parents) {
        parents[find(x, parents)] = find(y, parents);
    }
}
// @lc code=end

